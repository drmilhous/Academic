#include <stdio.h>
#include <stdlib.h>
#define N 10
#define UP 'U'
#define LEFT 'L'

typedef struct path{
	struct path * next;
	char direction;	
	int letters[4];	
}path;

struct cell{
int value;
int bitmap;
};

struct grid{
	cell * cells;
	short size;
};

void initCell(cell * c);
__global__ void copyCell(cell * o, cell * n)
{

}

__global__ void removeIndex(cell *c, int row, int col,int max, int value)
{
	int r = blockIdx.x;
	cell * x = &c[r*max + col];

	if(r == row)
		;//x->value = value;
	else
		x->bitmap |= value;
	for(int c1 = 0; c1 < max; c1++)
	{
		x = &c[row*max + c1];
		if( r == row && c1 == col)
		{
			x->value = value;
		}
		else
		{
		
			x->bitmap |= value;
		}
		//x->c = ch;
	}
}
__device__ void check(grid * g, int row, int col, int number, int * result)
{
	cell * c = g->cells[row][col];
	int mask = pow(2.0, (double) number);
	*result = (mask & c->bitmap);

}
__global__ void compute(grid * g,path * p)
{
	int x = blockIdx.x;
	int y = threadIdx.x;
	cell * current = g->cells[x][y];
	cell->value = p->letters[0];
	if(p->direction == UP)
	{
		for(int y1 = 0; y1 < grid->size; y1++)
		{	
			g->cells[x][y1] = p->letters[1];
		}
	}
	else
	{

	}
}


/*
__global__ void add( int *a, int *b, int *c )
{
	int tid = blockIdx.x; // handle the data at this index
	if (tid < N)
		c[tid] = a[tid] + b[tid];
}*/

char convert(int x)
{
	char res = 'a';
	int amount = log2((double)x) + (int)res;
	res = (char) amount;
	return res;
}

int main( void )
{

	cell * array;
	cudaMallocManaged( (void**)&array, N*N*sizeof(cell));
	cell** cells = malloc(N * sizeof(cell *));
	for(int i = 0; i < N; i++)
	{
		cells[i] = &cells[i * N*sizeof(cell)];
	}
	cudaFree(array);
	return 0;
}

void test2()
{

}

void initCell(cell * c)
{

	for (int row=0; row<N; row++)
		{
			for (int col=0; col<N; col++)
			{
				c[row * N + col].value = col;
				printf("[%02d][%02d]%02d ",row, col, c[row * N + col].bitmap);
				c[row * N + col].value = -1;
			}
			printf("\n");
		}
}
/*
void test1()
{
	cell * c = (cell *)malloc(N*N*sizeof(cell));
	cell * dev_c;
	cudaMalloc((void **) &dev_c, N*N*sizeof(cell));
	initCell(c);
	cudaMemcpy( dev_c, c, N*N * sizeof(cell), cudaMemcpyHostToDevice) ;
	char ch = 'a';
	ch = (char) (((int) ch) + 7);
	removeIndex<<<10,1>>>( dev_c, 0,5,N,pow(2,7));
	puts("");
	cudaMemcpy( c, dev_c, N*N * sizeof(cell),cudaMemcpyDeviceToHost);
	for (int row=0; row<N; row++)
		{
			for (int col=0; col<N; col++)
			{
				//printf("[%02d][%02d]%02X ",row, col, c[row * N + col].bitmap);
				int index = row * N + col;
				int value = c[index].value;
				char printC = ' ';
				if( value == -1)
				{
				   value = c[index].bitmap;
				}
				else

					printC = convert(value);
				printf("%02X-%c ", value, printC);
			}
			printf("\n");
		}
	// free the memory allocated on the GPU
	cudaFree( dev_c );
}*/
